#
# Linkerd1 Lifecycle configs
#

kind: Namespace
apiVersion: v1
metadata:
  name: linkerd

# RBAC configs for linkerd
---
# grant linkerd/namerd permissions to enable service discovery
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: linkerd-endpoints-reader
rules:
  - apiGroups: [""]
    resources: ["endpoints", "services"]
    verbs: ["get", "watch", "list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: linkerd-role-binding
subjects:
  - kind: ServiceAccount
    name: default
    namespace: linkerd
roleRef:
  kind: ClusterRole
  name: linkerd-endpoints-reader
  apiGroup: rbac.authorization.k8s.io

#
# Linkerd config
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: l5d-config
  namespace: linkerd
data:
  config.yaml: |-
    admin:
      ip: 0.0.0.0
      port: 9990

    namers:
    - kind: io.l5d.k8s
    - kind: io.l5d.rewrite
      prefix: /portNsSvcToK8s
      pattern: "/{port}/{ns}/{svc}"
      name: "/k8s/{ns}/{port}/{svc}"

    telemetry:
    - kind: io.l5d.prometheus

    usage:
      orgId: linkerd-examples-lifecycle

    routers:
    - label: http-outgoing
      protocol: http
      servers:
      - port: 4140
        ip: 0.0.0.0
      interpreter:
        kind: default
        transformers:
        - kind: io.l5d.k8s.daemonset
          namespace: linkerd
          port: http-incoming
          service: l5d
      dtab: |
        /k8s => /#/io.l5d.k8s ;
        /srv => /#/portNsSvcToK8s/http ;
        /svc => /$/io.buoyant.http.domainToPathPfx/srv ;

    - label: http-incoming
      protocol: http
      servers:
      - port: 4141
        ip: 0.0.0.0
      interpreter:
        kind: default
        transformers:
        - kind: io.l5d.k8s.localnode
      dtab: |
        /k8s => /#/io.l5d.k8s ;
        /srv => /#/portNsSvcToK8s/http ;
        /svc => /$/io.buoyant.http.domainToPathPfx/srv ;

    - label: grpc-outgoing
      protocol: h2
      servers:
      - port: 4340
        ip: 0.0.0.0
      interpreter:
        kind: default
        transformers:
        - kind: io.l5d.k8s.daemonset
          namespace: linkerd
          port: grpc-incoming
          service: l5d
      dtab: |
        /k8s => /#/io.l5d.k8s ;
        /srv => /#/portNsSvcToK8s/grpc ;
        /svc => /$/io.buoyant.http.domainToPathPfx/srv ;

    - label: grpc-incoming
      protocol: h2
      servers:
      - port: 4341
        ip: 0.0.0.0
      interpreter:
        kind: default
        transformers:
        - kind: io.l5d.k8s.localnode
      dtab: |
        /k8s =>/#/io.l5d.k8s ;
        /srv =>/#/portNsSvcToK8s/grpc ;
        /svc =>/$/io.buoyant.http.domainToPathPfx/srv ;
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    app: l5d
  name: l5d
  namespace: linkerd
spec:
  template:
    metadata:
      labels:
        app: l5d
    spec:
      volumes:
      - name: l5d-config
        configMap:
          name: "l5d-config"
      containers:
      - name: l5d
        image: buoyantio/linkerd:1.7.0
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        args:
        - /io.buoyant/linkerd/config/config.yaml
        ports:
        - name: linkerd-metrics
          containerPort: 9990
        - name: http-outgoing
          containerPort: 4140
          hostPort: 4140
        - name: http-incoming
          containerPort: 4141
        - name: grpc-outgoing
          containerPort: 4340
          hostPort: 4340
        - name: grpc-incoming
          containerPort: 4341
        volumeMounts:
        - name: "l5d-config"
          mountPath: "/io.buoyant/linkerd/config"
          readOnly: true

      - name: kubectl
        image: buoyantio/kubectl:v1.14.3
        args:
        - "proxy"
        - "-p"
        - "8001"
---
apiVersion: v1
kind: Service
metadata:
  name: l5d
  namespace: linkerd
spec:
  selector:
    app: l5d
  ports:
  - name: http-outgoing
    port: 4140
  - name: http-incoming
    port: 4141
  - name: grpc-outgoing
    port: 4340
  - name: grpc-incoming
    port: 4341
---
#
# linkerd-viz (Prometheus + Grafana)
#
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: linkerd-prometheus
rules:
- apiGroups: [""]
  resources: ["endpoints", "nodes", "nodes/proxy", "pods", "services"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: linkerd-prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd
  labels:
    app: prometheus
data:
  prometheus-lifecycle.yml: |-
    global:
      scrape_interval: 10s
      scrape_timeout: 10s
      evaluation_interval: 10s

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9191']

    - job_name: 'linkerd'
      metrics_path: /admin/metrics/prometheus

      kubernetes_sd_configs:
      - api_server: 'http://localhost:8001'
        role: endpoints

      relabel_configs:
      # only collect from linkerd's
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name]
        regex:         ^linkerd;l5d$
        action:        keep
      # only collect from the admin port
      - source_labels: [__address__]
        action: replace
        target_label: __address__
        regex: (.+)(?::\d+)
        replacement: $1:9990
      # strip off port
      - source_labels: [__address__]
        action: replace
        target_label: instance
        regex: (.+)(?::\d+)
        replacement: $1

      metric_relabel_configs:
      - source_labels: [client]
        action:        replace
        target_label:  client
        regex:         .*/([^/]+)/([^/]+)/([^/]+)
        replacement:   $1/$3
      - source_labels: [service]
        action:        replace
        target_label:  service
        regex:         .*/([^/]+)/([^/]+)/([^/]+)
        replacement:   $1/$3

    - job_name: 'slow-cooker'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_container_port_name]
        action: keep
        regex: ^lifecycle(.+);slow-cooker$
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: linkerd-viz
  namespace: linkerd
  labels:
    name: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      name: linkerd-viz
  template:
    metadata:
      labels:
        name: linkerd-viz
    spec:
      serviceAccount: prometheus
      volumes:
      - configMap:
          name: prometheus-config
        name: prometheus-config
      containers:
      - name: linkerd-viz
        image: buoyantio/linkerd-viz:0.2.0
        args: ["lifecycle"]
        env:
        - name: SCRAPE_INTERVAL
          value: "10s"
        ports:
        - name: grafana
          containerPort: 3000
        - name: prometheus
          containerPort: 9191
        volumeMounts:
        - mountPath: /etc/prometheus
          name: prometheus-config
          readOnly: true

      - name: kubectl
        image: buoyantio/kubectl:v1.14.3
        args:
        - "proxy"
        - "-p"
        - "8001"
---
apiVersion: v1
kind: Service
metadata:
  name: linkerd-viz
  labels:
    name: linkerd-viz
spec:
  ports:
  - name: grafana
    port: 3000
    targetPort: 3000
  - name: prometheus
    port: 9191
    targetPort: 9191
  selector:
    name: linkerd-viz
